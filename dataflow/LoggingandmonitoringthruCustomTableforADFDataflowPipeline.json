{
	"name": "LoggingandmonitoringthruCustomTableforADFDataflowPipeline",
	"properties": {
		"description": "LoggingandmonitoringthruCustomTableforADFDataflowPipeline \nLogging and monitoring thru Custom Table for ADF Dataflow Pipeline",
		"folder": {
			"name": "duplidacte re cords dataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage4",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				},
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DataFactory_Name as string,",
				"          Pipeline_Name as string,",
				"          RunId as string,",
				"          datafactoryname as string,",
				"          TriggerTime as string,",
				"          TriggerId as string,",
				"          Source as string,",
				"          Destination as string,",
				"          metrics as string,",
				"          profile as string,",
				"          ErrorLoggedTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'adf',",
				"     fileName: 'df_suc.txt',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source1",
				"source1 derive(metrics = flatten(array((split(metrics,',')))),",
				"          profile = flatten(array((split(profile,','))))) ~> derivedColumn1",
				"derivedColumn1 foldDown(unroll(metrics, metrics),",
				"     mapColumn(",
				"          metrics",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"derivedColumn1 foldDown(unroll(profile, profile),",
				"     mapColumn(",
				"          profile",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"derivedColumn1 select(mapColumn(",
				"          DataFactory_Name,",
				"          Pipeline_Name,",
				"          RunId,",
				"          datafactoryname,",
				"          TriggerTime,",
				"          TriggerId,",
				"          Source,",
				"          Destination,",
				"          ErrorLoggedTime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"flatten1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'metrics',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'logs',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2",
				"flatten2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'profile',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink3"
			]
		}
	}
}