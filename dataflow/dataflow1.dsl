source(output(
		{urn:Test.Namespace,Root} as ({urn:Test.Namespace,session} as ({urn:Test.Namespace,AdditionalData} as ({urn:Test.Namespace,KeyValuePair} as ({urn:Test.Namespace,Key} as string, {urn:Test.Namespace,Value} as string)[]), {urn:Test.Namespace,data} as ({urn:Test.Namespace,Flags} as string, {urn:Test.Namespace,Quotes} as ({urn:Test.Namespace,Quote} as ({urn:Test.Namespace,ComparedSessionId} as string, {urn:Test.Namespace,Differences} as ({urn:Test.Namespace,VoluntaryExcess} as ({urn:Test.Namespace,New} as short, {urn:Test.Namespace,Old} as short)), {urn:Test.Namespace,HistoryStatus} as string, {urn:Test.Namespace,No} as short, {urn:Test.Namespace,Price} as short, {urn:Test.Namespace,QuoteDate} as timestamp, {urn:Test.Namespace,QuoteStatus} as short, {urn:Test.Namespace,SessionId} as string, {urn:Test.Namespace,Termsimposed} as boolean, {urn:Test.Namespace,TransactionType} as short, {urn:Test.Namespace,usage} as ({urn:Test.Namespace,bonus} as ({urn:Test.Namespace,NCB} as short, {urn:Test.Namespace,other} as short), {urn:Test.Namespace,kept} as ({urn:Test.Namespace,day} as string, {urn:Test.Namespace,location} as string, {urn:Test.Namespace,overnight} as string), {urn:Test.Namespace,mileage} as short, {urn:Test.Namespace,use} as string))[]), {urn:Test.Namespace,TransactionReason} as string, {urn:Test.Namespace,VehicleQuoteID} as string, {urn:Test.Namespace,policy} as ({urn:Test.Namespace,Aggregator} as string, {urn:Test.Namespace,CampaignCode} as string, {urn:Test.Namespace,CorrectionAdjustmentCategory} as string, {urn:Test.Namespace,CorrectionAdjustmentSubCategory} as string, {urn:Test.Namespace,Cover} as ({urn:Test.Namespace,CoverDate} as timestamp, {urn:Test.Namespace,CoverKind} as string, {urn:Test.Namespace,CoverType} as short[], {urn:Test.Namespace,insurance} as string, {urn:Test.Namespace,voluntaryexcess} as string), {urn:Test.Namespace,DiscountCode} as string, {urn:Test.Namespace,EmailAddress} as string, {urn:Test.Namespace,InceptionDate} as timestamp, {urn:Test.Namespace,InceptionScheme} as string, {urn:Test.Namespace,InceptionSource} as string, {urn:Test.Namespace,RequestDate} as timestamp, {urn:Test.Namespace,drivers} as ({urn:Test.Namespace,driver} as ({urn:Test.Namespace,Address} as ({urn:Test.Namespace,HouseName} as string, {urn:Test.Namespace,HouseNumber} as short, {urn:Test.Namespace,postcode} as short), {urn:Test.Namespace,Claims} as ({urn:Test.Namespace,Claims} as boolean, {urn:Test.Namespace,ClaimsDetails} as boolean, {urn:Test.Namespace,Nonmotoring} as boolean), {urn:Test.Namespace,Contact} as ({urn:Test.Namespace,Email} as string, {urn:Test.Namespace,mobile} as string), {urn:Test.Namespace,DateOfBirth} as date, {urn:Test.Namespace,DriverNumber} as boolean, {urn:Test.Namespace,FirstName} as string, {urn:Test.Namespace,Gender} as string, {urn:Test.Namespace,MaritalStatus} as string, {urn:Test.Namespace,RelationshipToProposer} as boolean, {urn:Test.Namespace,ResidenceDate} as date, {urn:Test.Namespace,Surname} as string, {urn:Test.Namespace,household} as ({urn:Test.Namespace,HomeOwner} as boolean, {urn:Test.Namespace,NumberOfCar} as short, {urn:Test.Namespace,NumberOfChildren} as boolean), {urn:Test.Namespace,licence} as ({urn:Test.Namespace,DrivingLicenceNumber} as short, {urn:Test.Namespace,DrivingLicenceNumberKnown} as boolean, {urn:Test.Namespace,LicenceDate} as date, {urn:Test.Namespace,LicenceType} as string, {urn:Test.Namespace,PetOwner} as boolean), {urn:Test.Namespace,occupation} as ({urn:Test.Namespace,Business} as short, {urn:Test.Namespace,EmploymentStatus} as boolean, {urn:Test.Namespace,OccupationType} as short))), {urn:Test.Namespace,vehicle} as ({urn:Test.Namespace,ABICode} as short, {urn:Test.Namespace,About} as ({urn:Test.Namespace,Dashcam} as boolean, {urn:Test.Namespace,LORRDrive} as string, {urn:Test.Namespace,NumberOfSeats} as short, {urn:Test.Namespace,Value} as string, {urn:Test.Namespace,immobiliser} as string, {urn:Test.Namespace,imported} as boolean, {urn:Test.Namespace,modifications} as boolean, {urn:Test.Namespace,tracker} as boolean), {urn:Test.Namespace,AnnualBusinessMileage} as boolean, {urn:Test.Namespace,AnnualPleasureMileage} as short, {urn:Test.Namespace,Body} as string, {urn:Test.Namespace,DriveSide} as boolean, {urn:Test.Namespace,Engine} as string, {urn:Test.Namespace,Fuel} as string, {urn:Test.Namespace,LocationKept} as short, {urn:Test.Namespace,Manufacturer} as string, {urn:Test.Namespace,Model} as string, {urn:Test.Namespace,PurchasedDate} as date, {urn:Test.Namespace,Registration} as string, {urn:Test.Namespace,Transmission} as string, {urn:Test.Namespace,VehicleKeptDayLocation} as short, {urn:Test.Namespace,Year} as short, {urn:Test.Namespace,ownership} as ({urn:Test.Namespace,ManufacturedDate} as date, {urn:Test.Namespace,RegisteredKeeper} as short, {urn:Test.Namespace,RegisteredOwner} as short, {urn:Test.Namespace,RegisteredQPlate} as boolean, {urn:Test.Namespace,buy} as boolean), {urn:Test.Namespace,securitydevice} as ({urn:Test.Namespace,Fitter} as short, {urn:Test.Namespace,Type} as short))))))
	),
	allowSchemaDrift: true,
	validateSchema: false,
	ignoreNoFilesFound: false,
	format: 'xml',
	container: 'adf',
	fileName: 'codebeautify (2).xml',
	validationMode: 'xsd',
	namespaces: true) ~> source1
source1 derive(Key_val = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,AdditionalData}.{urn:Test.Namespace,KeyValuePair},
		Flags = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,Flags},
		{Transaction reason} = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,TransactionReason},
		VehiclequoteID = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,VehicleQuoteID},
		Quote = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,Quotes}.{urn:Test.Namespace,Quote},
		Cover = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,Cover},
		driver = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,drivers},
		Vehicle = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,vehicle}) ~> derivedColumn1
derivedColumn1 foldDown(unroll({urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,AdditionalData}.{urn:Test.Namespace,KeyValuePair}),
	mapColumn(
		Key = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,AdditionalData}.{urn:Test.Namespace,KeyValuePair}.{urn:Test.Namespace,Key},
		Value = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,AdditionalData}.{urn:Test.Namespace,KeyValuePair}.{urn:Test.Namespace,Value},
		data = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,Aggregator},
		CampaignCode = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,CampaignCode},
		CorrectionAdjustmentCategory = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,CorrectionAdjustmentCategory},
		DiscountCode = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,DiscountCode},
		EmailAddress = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,EmailAddress},
		Inception_date = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,InceptionDate},
		InceptionScheme = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,InceptionScheme},
		InceptionSource = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,InceptionSource},
		RequestDate = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,RequestDate},
		Aggregator = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,Aggregator},
		CorrectionAdjustmentSubCategory = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,CorrectionAdjustmentSubCategory},
		CoverDate = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,Cover}.{urn:Test.Namespace,CoverDate},
		CoverType = Cover.{urn:Test.Namespace,CoverType},
		CoverKind = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,Cover}.{urn:Test.Namespace,CoverKind},
		insurance = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,Cover}.{urn:Test.Namespace,insurance},
		voluntaryexcess = {urn:Test.Namespace,Root}.{urn:Test.Namespace,session}.{urn:Test.Namespace,data}.{urn:Test.Namespace,policy}.{urn:Test.Namespace,Cover}.{urn:Test.Namespace,voluntaryexcess},
		VehiclequoteID,
		{Transaction reason},
		Flags,
		Quote,
		driver,
		Vehicle
	),
	skipDuplicateMapInputs: false,
	skipDuplicateMapOutputs: false) ~> flatten1
flatten1 foldDown(unroll(CoverType),
	mapColumn(
		Key,
		Value,
		data,
		CampaignCode,
		CorrectionAdjustmentCategory,
		DiscountCode,
		EmailAddress,
		Inception_date,
		InceptionScheme,
		InceptionSource,
		RequestDate,
		Aggregator,
		CorrectionAdjustmentSubCategory,
		CoverDate,
		CoverType,
		CoverKind,
		insurance,
		voluntaryexcess,
		VehiclequoteID,
		{Transaction reason},
		Flags,
		Quote,
		driver,
		Vehicle,
		drivers = driver.{urn:Test.Namespace,driver},
		{Namespace,Address} = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,Address}
	),
	skipDuplicateMapInputs: false,
	skipDuplicateMapOutputs: false) ~> flatten2
flatten2 foldDown(unroll(Quote),
	mapColumn(
		ComparedSessionId = Quote.{urn:Test.Namespace,ComparedSessionId},
		New = Quote.{urn:Test.Namespace,Differences}.{urn:Test.Namespace,VoluntaryExcess}.{urn:Test.Namespace,New},
		Old = Quote.{urn:Test.Namespace,Differences}.{urn:Test.Namespace,VoluntaryExcess}.{urn:Test.Namespace,Old},
		HistoryStatus = Quote.{urn:Test.Namespace,HistoryStatus},
		No = Quote.{urn:Test.Namespace,No},
		Price = Quote.{urn:Test.Namespace,Price},
		QuoteDate = Quote.{urn:Test.Namespace,QuoteDate},
		QuoteStatus = Quote.{urn:Test.Namespace,QuoteStatus},
		SessionId = Quote.{urn:Test.Namespace,SessionId},
		Termsimposed = Quote.{urn:Test.Namespace,Termsimposed},
		TransactionType = Quote.{urn:Test.Namespace,TransactionType},
		NCB = Quote.{urn:Test.Namespace,usage}.{urn:Test.Namespace,bonus}.{urn:Test.Namespace,NCB},
		usage_other = Quote.{urn:Test.Namespace,usage}.{urn:Test.Namespace,bonus}.{urn:Test.Namespace,other},
		usage_kept_day = Quote.{urn:Test.Namespace,usage}.{urn:Test.Namespace,kept}.{urn:Test.Namespace,day},
		usage_kept_location = Quote.{urn:Test.Namespace,usage}.{urn:Test.Namespace,kept}.{urn:Test.Namespace,location},
		usage_kept_overnight = Quote.{urn:Test.Namespace,usage}.{urn:Test.Namespace,kept}.{urn:Test.Namespace,overnight},
		HouseName = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,Address}.{urn:Test.Namespace,HouseName},
		HouseNumber = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,Address}.{urn:Test.Namespace,HouseNumber},
		postcode = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,Address}.{urn:Test.Namespace,postcode},
		Claims = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,Claims}.{urn:Test.Namespace,Claims},
		ClaimsDetails = drivers.{urn:Test.Namespace,Claims}.{urn:Test.Namespace,ClaimsDetails},
		Nonmotoring = drivers.{urn:Test.Namespace,Claims}.{urn:Test.Namespace,Nonmotoring},
		DateOfBirth = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,DateOfBirth},
		DriverNumber = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,DriverNumber},
		FirstName = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,FirstName},
		Gender = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,Gender},
		MaritalStatus = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,MaritalStatus},
		RelationshipToProposer = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,RelationshipToProposer},
		ResidenceDate = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,ResidenceDate},
		Surname = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,Surname},
		LicenceType = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,licence}.{urn:Test.Namespace,LicenceType},
		PetOwner = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,licence}.{urn:Test.Namespace,PetOwner},
		Business = driver.{urn:Test.Namespace,driver}.{urn:Test.Namespace,occupation}.{urn:Test.Namespace,Business},
		EmploymentStatus = drivers.{urn:Test.Namespace,occupation}.{urn:Test.Namespace,EmploymentStatus},
		OccupationType = drivers.{urn:Test.Namespace,occupation}.{urn:Test.Namespace,OccupationType},
		ABICode = Vehicle.{urn:Test.Namespace,ABICode},
		Dashcam = Vehicle.{urn:Test.Namespace,About}.{urn:Test.Namespace,Dashcam},
		LORRDrive = Vehicle.{urn:Test.Namespace,About}.{urn:Test.Namespace,LORRDrive},
		NumberOfSeats = Vehicle.{urn:Test.Namespace,About}.{urn:Test.Namespace,NumberOfSeats},
		Value = Vehicle.{urn:Test.Namespace,About}.{urn:Test.Namespace,Value},
		immobiliser = Vehicle.{urn:Test.Namespace,About}.{urn:Test.Namespace,immobiliser},
		imported = Vehicle.{urn:Test.Namespace,About}.{urn:Test.Namespace,imported},
		modifications = Vehicle.{urn:Test.Namespace,About}.{urn:Test.Namespace,modifications},
		tracker = Vehicle.{urn:Test.Namespace,About}.{urn:Test.Namespace,tracker},
		AnnualBusinessMileage = Vehicle.{urn:Test.Namespace,AnnualBusinessMileage},
		AnnualPleasureMileage = Vehicle.{urn:Test.Namespace,AnnualPleasureMileage},
		Body = Vehicle.{urn:Test.Namespace,Body},
		DriveSide = Vehicle.{urn:Test.Namespace,DriveSide},
		Engine = Vehicle.{urn:Test.Namespace,Engine},
		Fuel = Vehicle.{urn:Test.Namespace,Fuel},
		LocationKept = Vehicle.{urn:Test.Namespace,LocationKept},
		Manufacturer = Vehicle.{urn:Test.Namespace,Manufacturer},
		Model = Vehicle.{urn:Test.Namespace,Model},
		PurchasedDate = Vehicle.{urn:Test.Namespace,PurchasedDate},
		Registration = Vehicle.{urn:Test.Namespace,Registration},
		Transmission = Vehicle.{urn:Test.Namespace,Transmission},
		VehicleKeptDayLocation = Vehicle.{urn:Test.Namespace,VehicleKeptDayLocation},
		Year = Vehicle.{urn:Test.Namespace,Year},
		{Manufactured date} = Vehicle.{urn:Test.Namespace,ownership}.{urn:Test.Namespace,ManufacturedDate},
		RegisteredKeeper = Vehicle.{urn:Test.Namespace,ownership}.{urn:Test.Namespace,RegisteredKeeper},
		RegisteredOwner = Vehicle.{urn:Test.Namespace,ownership}.{urn:Test.Namespace,RegisteredOwner},
		RegisteredQPlate = Vehicle.{urn:Test.Namespace,ownership}.{urn:Test.Namespace,RegisteredQPlate},
		buy = Vehicle.{urn:Test.Namespace,ownership}.{urn:Test.Namespace,buy}
	),
	skipDuplicateMapInputs: false,
	skipDuplicateMapOutputs: false) ~> flatten4
flatten4 sink(allowSchemaDrift: true,
	validateSchema: false,
	skipDuplicateMapInputs: true,
	skipDuplicateMapOutputs: true,
	store: 'cache',
	format: 'inline',
	output: false,
	saveOrder: 1) ~> sink1