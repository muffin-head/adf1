{
	"name": "dynamicDatathroughpipelneTESTINGFlowlet",
	"properties": {
		"folder": {
			"name": "Dynamic Folder Logging and fetching"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Excel1",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "linkedService2",
						"type": "LinkedServiceReference"
					},
					"name": "FinalTable"
				}
			],
			"transformations": [
				{
					"name": "dateNeedToValidate"
				},
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "startDateEndDate1",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parameter1 as string,",
				"     parameter2 as string,",
				"     parameter3 as string ('Sheet1')",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     wildcardPaths:[($parameter1)]) ~> source2",
				"source2 derive({start date} = toDate(byName('start date')),",
				"          endDate = toDate(byName('end date')),",
				"          EmployeeID = toShort(byName('EmployeeID'))) ~> dateNeedToValidate",
				"dateNeedToValidate compose(mapColumn(",
				"          {start date},",
				"          EmployeeID,",
				"          endDate",
				"     ),",
				"     composition: 'startDateEndDate1') ~> flowlet1@(output1)",
				"flowlet1@output1 alterRow(updateIf(true())) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: ($parameter2),",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['EmployeeID'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> FinalTable"
			]
		}
	}
}